<?php
/*Дан массив из n элементов, начиная с 1. Каждый следующий элемент равен (предыдущий + 1). Но в массиве гарантированно 1 число пропущено. Необходимо вывести на экран пропущенное число.
Примеры:
[1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16] => 11
[1, 2, 4, 5, 6] => 3
[] => 1*/
// find a one missing element from array with Big-O(log n)

function findMissingEl($myArray)
{
    $start = 0;
    $end = count($myArray) - 1;
    $n = 0;
    $answer = 1; //если массив пустой [] =>1

    while ($start < $end) {
        $n++;
        $base = floor(($start + $end) / 2); //находим базовый индекс как середину не исследованной области массива
        echo "Проверяется элемент с индексом: $base" . PHP_EOL;

        $index = $base + 1; //порядковый номер элемента (не индекс) - так как индекс в массиве от 0, а значения массива от 1, то увеличим на 1 для проверки:
        //если Значение элемента равно Порядковому номеру элемента, значит пропущенный элемент пока еще в области справа
        if ($myArray[$base] == $index) {
            $deltaRight = $myArray[$base + 1] - $myArray[$base]; //проверим один Правый элемент
            if ($deltaRight == 2) { //если он больше чем n+1,
                $answer = $myArray[$base] + 1; //то нашли! (рассчитаем его)
                break;
            }
            //Если не нашли один элемент справа, то сужаем исследуемое поле массива отбросив всю левую часть,
            // т.к. там значения идут по-порядку.
            $start = $base + 1;

        } else { //если же Значение элемента больше его Порядкового номера, значит пропущенный элемент в области слева
            $deltaLeft = $myArray[$base] - $myArray[$base - 1]; //Проверим один левый элемент
            if ($deltaLeft == 2) {
                $answer = $myArray[$base] - 1;
                break;
            }
            $end = $base - 1; //Если не нашли - сужаем исследуемое поле массива отбросив всю правую часть
        }
    }
    echo "Количество итераций: $n" . PHP_EOL;
    return $answer;
}
